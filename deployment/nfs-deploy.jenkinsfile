pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-role
  volumes:
  - name: shared-data
    emptyDir: {}
  - name: aws-creds
    emptyDir: {}
  containers:
  - name: terraform
    image: hashicorp/terraform:1.8.5
    command:
    - cat
    tty: true
    volumeMounts:
    - name: aws-creds
      mountPath: /root/.aws
  - name: awscli
    image: artifactory.cloud.cms.gov/docker/amazon/aws-cli:2.7.30
    command: ['cat']
    tty: true
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/data
    - name: aws-creds
      mountPath: /root/.aws
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: ['/busybox/cat']
    tty: true
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/data
    resources:
      limits:
        cpu: 5000m
        memory: 4Gi
        ephemeral-storage: 20Gi
"""
    }
  }
  environment {
    PACKER_VERSION = '1.7.2'
    CURR_PATH = pwd()
    AWS_REGION = 'us-east-1'
  }
  parameters {
    booleanParam(name: 'terraformApply', defaultValue: false, description: 'Execute Terrafrom Apply')
    choice(name: 'AWS_ACCOUNT', choices: [
        '714767623162:kmp-dev',
        '213014777092:kmp-ai-workspace-dev',
    ], description: 'Select the AWS Account for the build')
  }
  stages {

    stage('AWS Config') {
      steps {
        container('awscli') {
          script {
            def account = params.AWS_ACCOUNT.split(':')[0]
            def roleArn = "arn:aws:iam::${account}:role/delegatedadmin/developer/jenkins-role"

            sh """
            # Install jq for JSON parsing
            yum install -y jq

            # Assume the AWS role and save credentials to /tmp/role-creds.txt
            aws sts assume-role \
              --role-arn ${roleArn} \
              --role-session-name session \
              --output text \
              --query Credentials \
              > /tmp/role-creds.txt

            # Create the credentials file
            cat > /root/.aws/credentials <<EOF
[default]
aws_access_key_id = \$(cut -f1 /tmp/role-creds.txt)
aws_secret_access_key = \$(cut -f3 /tmp/role-creds.txt)
aws_session_token = \$(cut -f4 /tmp/role-creds.txt)
EOF

            # Verify the assumed role
            aws sts get-caller-identity
            # Clear AWS_WEB_IDENTITY_TOKEN_FILE
            unset AWS_WEB_IDENTITY_TOKEN_FILE
            # Check S3 and describe VPCs to verify access
            #chmod +x deployment/config.sh
            #./deployment/config.sh ${account}
            """
          }
        }
      }
    }
    stage('Run Terraform flow Plan') {
      steps {
        container('terraform') {
          script {
            def subnetId, vpcId
            switch(params.AWS_ACCOUNT.split(':')[0]) {
              case "714767623162":
                tfvarsFile = "../environments/nfs-dev.tfvars"
                tfConfigFile = "../config/nfs-dev.tfbackend"
                break
              case "213014777092":
                tfvarsFile = "../environments/nfs-prod.tfvars"
                tfConfigFile = "../config/nfs-prod.tfbackend"
                break
              default:
                error "AWS Account not configured for Subnet and VPC IDs!"
            }
          sh """
          # mkdir -p $HOME/.aws
          # cp -v .aws-creds $HOME/.aws/credentials
          unset AWS_WEB_IDENTITY_TOKEN_FILE

          # Run Terraform
          cd deployment/nfs
          terraform init -backend-config "${tfConfigFile}"
          terraform plan -var-file="${tfvarsFile}"
          """
          }
        }
      }
    }
    stage('Approve Terraform Apply') {
       when {
        expression { return !params.terraformApply }
      }
      steps {
        input message: 'Approve Terraform Apply?', ok: 'Apply'
      }
    }
    stage('Run Terraform flow Apply') {
      steps {
        container('terraform') {
          script {
            def subnetId, vpcId
            switch(params.AWS_ACCOUNT.split(':')[0]) {
              case "714767623162":
                tfvarsFile = "../environments/nfs-dev.tfvars"
                tfConfigFile = "../config/nfs-dev.tfbackend"
                break
              case "213014777092":
                tfvarsFile = "../environments/nfs-prod.tfvars"
                tfConfigFile = "../config/nfs-prod.tfbackend"
                break
              default:
                error "AWS Account not configured for Subnet and VPC IDs!"
            }
          sh """
          unset AWS_WEB_IDENTITY_TOKEN_FILE
          # Run Terraform Apply
          cd deployment/nfs
          terraform apply -var-file="${tfvarsFile}" -auto-approve
          """
          }
        }
      }
    }
  }
  post {
    success {
      echo 'Terraform Build Successful!'
    }
    failure {
      echo 'Terraform Build Failed!'
    }
  }
}
